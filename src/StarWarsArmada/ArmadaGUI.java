/***************************************************************
*** Class Name: ArmadaGUI
*** Class Author: Austin LeBel
****************************************************************
*** Purpose of the class: Builds a graphical user interface for
*** a user to add, load, and delete ships from a database.
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
package StarWarsArmada;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.Objects;

public class ArmadaGUI extends javax.swing.JFrame {
    // Insantiate armadaInv as an array of type Ship
    private Ship[] armadaInv = new Ship[500];
    // Holds index value for array
    private static int index = 0;
    // Holds database url string
    static final String DATABASE_URL = "jdbc:sqlserver://CTASV20r2drw:1433;databaseName= al029FirstAssignment;user=al029;password=CISK2017al;instanceName=mssqlserver2012";
/***************************************************************
*** Method Name: ArmadaGUI (constructor)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Builds the ArmadaGUI graphical
*** user interface.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    public ArmadaGUI() {
        initComponents();
        // Disable all fields and buttons except load
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField4.setEnabled(false);
        jTextField6.setEnabled(false);
        jTextField7.setEnabled(false);
        jTextField8.setEnabled(false);
        jButton1.setEnabled(false);
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(false);
        jButton10.setEnabled(false);
        // Set label sizes so they do not resize when text is changed
        jLabel1.setPreferredSize(new Dimension(125,125));
        jLabel2.setPreferredSize(new Dimension(100,100));
        jLabel3.setPreferredSize(new Dimension(100,100));
        jLabel4.setPreferredSize(new Dimension(100,100));
        jLabel5.setPreferredSize(new Dimension(100,100));
        jLabel6.setPreferredSize(new Dimension(100,100));
        jLabel7.setPreferredSize(new Dimension(100,100));
        jLabel8.setPreferredSize(new Dimension(100,100));
        jLabel9.setPreferredSize(new Dimension(100,100));
        jLabel10.setPreferredSize(new Dimension(100,100));
        // Set fixed size for panel so it does not resize
        jPanel2.setPreferredSize(new Dimension(265,209));
        // Note label
        jLabel28.setText("<html>Note* ShipID is created by the database to ensure no duplicates. Load the database after saving to view the shipID's.</html>");
        // Fill array with null values.
        for( int a = 0; a < armadaInv.length; a++ )
        {
            armadaInv[a] = null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();

        jLabel13.setText("jLabel13");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Logo1.jpg"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setMaximumSize(new java.awt.Dimension(125, 125));
        jLabel1.setMinimumSize(new java.awt.Dimension(125, 125));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Current Starship Specifications");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Class:");

        jLabel4.setText("Model:");

        jLabel5.setText("Manufacturer:");

        jLabel6.setText("Shielding:");

        jLabel7.setText("Ship ID:");

        jLabel8.setText("Weapons:");

        jLabel9.setText("Engine:");

        jLabel10.setText("Hyperdrive:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel3))
                        .addContainerGap(183, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Freighter");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Fighter/Bomber");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Capital Ship");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel12.setText("Star Wars Armada Database");

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel15.setText("Model:");

        jLabel16.setText("Manufacturer:");

        jLabel17.setText("Shielding:");

        jLabel19.setText("Weapons:");

        jLabel20.setText("Engine:");

        jLabel21.setText("Hyperdrive:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel15))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))
                            .addComponent(jTextField4))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jButton1.setText("Reset");
        jButton1.setToolTipText("Clears the application");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.setToolTipText("Close Application");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save");
        jButton3.setToolTipText("Saves current Armada to the Database");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Load");
        jButton4.setToolTipText("Loads the Armada from the Database");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel23.setText("New Starship Information");

        jButton5.setText("Next");
        jButton5.setToolTipText("Display Next Ship");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Previous");
        jButton6.setToolTipText("Display Previous Ship");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Delete");
        jButton7.setToolTipText("Delete Current Ship From Database");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Add Ship");
        jButton8.setToolTipText("Adds new ship to armada");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel14.setText("*Select Ship Class");

        jButton9.setText("Remove");
        jButton9.setToolTipText("Remove current vehicle. Does not affect database");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Clear");
        jButton10.setToolTipText("Clears new Starship Information");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Specification Examples");

        jLabel18.setText("Model: YT1300, XWing, Destroyer");

        jLabel22.setText("Manufacturer: Corellian, Rebel, Imperial");

        jLabel24.setText("Shielding: Novaldex, GA421, Deflector");

        jLabel25.setText("Weapons: Laser, Ion, Proton");

        jLabel26.setText("Engine: Proto jet, Ion jet, Ultimax Drive");

        jLabel27.setText("Hyperdrive: Avatar-10, Hypermatter, R300");

        jLabel28.setText("jLabel28");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton9))
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel23)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(226, 226, 226))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel28))))
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton9)
                    .addComponent(jButton5))
                .addGap(27, 27, 27)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jButton3)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton10))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/***************************************************************
*** Method Name: jRadioButton1 (Freighter)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Enables fields and changes picture
*** to freighter. Automatically assigns the ship class to
*** freighter.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        // Set pictures to freighter
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/freighter.jpg")));
        // Enable applicable fields
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jTextField4.setEnabled(true);
        jTextField6.setEnabled(true);
        jTextField7.setEnabled(true);
        jTextField8.setEnabled(true);
        // Enable applicable buttons
        jButton8.setEnabled(true);
        jButton10.setEnabled(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed
/***************************************************************
*** Method Name: jRadioButton2 (Fighter/Bomber)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Enables fields and changes picture
*** to fighter/bomber. Automatically assigns the ship class to
*** fighter/bomber.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        // Sets picture to fighter/bomber
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Ywing.jpg")));
        // Enable applicable fields
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jTextField4.setEnabled(true);
        jTextField6.setEnabled(true);
        jTextField7.setEnabled(true);
        jTextField8.setEnabled(true);
        // Enable applicable buttons
        jButton8.setEnabled(true);
        jButton10.setEnabled(true);
    }//GEN-LAST:event_jRadioButton2ActionPerformed
/***************************************************************
*** Method Name: jRadioButton3 (Capital Ship)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Enables fields and changes picture
*** to capital ship. Automatically assigns the ship class to
*** capital ship.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        // Set label to capital ship image
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/venator.jpg")));
        // Enable applicable fields
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jTextField4.setEnabled(true);
        jTextField6.setEnabled(true);
        jTextField7.setEnabled(true);
        jTextField8.setEnabled(true);
        // Enable applicable buttons
        jButton8.setEnabled(true);
        jButton10.setEnabled(true);
    }//GEN-LAST:event_jRadioButton3ActionPerformed
/***************************************************************
*** Method Name: jButton2 (Close button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Closes the application on click
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed
/***************************************************************
*** Method Name: jButton1 (Reset button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Reset the application to it's
*** original starting state and setting the armada inventory
*** to null.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: Reset BUTTON
        // Set label 1 image to star wars logo
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Logo1.jpg")));
        // Reset text fields to null
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        // Reset armada inventory
        armadaInv = new Ship[500];
        // Fill new inventory with null values
        for( int a = 0; a < armadaInv.length; a++ )
        {
            armadaInv[a] = null;
        }
        // Reset all specification labels to default displays
        jLabel7.setText("Ship ID:");
        jLabel3.setText("Class:");
        jLabel4.setText("Model:");
        jLabel5.setText("Manufacturer:");
        jLabel6.setText("Shielding:");
        jLabel8.setText("Weapons:");
        jLabel9.setText("Engine:");
        jLabel10.setText("Hyperdrive:");
        // Disable and enable applicable buttons
        jButton3.setEnabled(false);
        jButton7.setEnabled(false);
        jButton4.setEnabled(true);
        // Display message when reset completes
        JOptionPane.showMessageDialog(null, "Aramada Inventory Application has been reset", "Reset", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1ActionPerformed
/***************************************************************
*** Method Name: jButton3 (Save button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Opens a database connection and saves
*** the current inventory.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here: SAVE BUTTON
        //Check with user to confirm save
        int n = JOptionPane.showConfirmDialog(null,"Are you sure you would like to save to the database?",
                                              "Save", JOptionPane.YES_NO_OPTION);
        // If user selects yes
        if(n == JOptionPane.YES_OPTION)
        {
            // Create connection
            Connection connection = null;
            // Create statement
            Statement statement = null;
            // Create resultset
            ResultSet rs = null;
            // Create update for type and specifications
            PreparedStatement updateShipType;
            PreparedStatement updateShipSpecs;
            // Hold string ship class
            String sClass = "";
            // Hold string model
            String mdl = "";
            // Hold string manufacturer
            String mnfr = "";
            // Hold string shield
            String shld = "";
            // Hold string weapons
            String wpns = "";
            // Hold string engine
            String eng = "";
            // Hold string hyperdrive
            String hypdr = "";
            // Holds next available shipid
            int id = 0;
            // Try catch begin
            try
            {
                // Load driver
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                // Get connection thru connection string
                connection = DriverManager.getConnection(DATABASE_URL);
                // Create statement
                statement = connection.createStatement();
                // Prepare update statements
                updateShipType = connection.prepareStatement("INSERT INTO [Ship.Type](Class, Model)"
                                                            +"VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS);
                updateShipSpecs = connection.prepareStatement("INSERT INTO [Ship.Specifications](ShipID, Manufacturer, Shielding, Weapons, Engine, HyperDrive)"
                                                            +"Values(?, ?, ?, ?, ?, ?)");
                
                // Instantiate temporary ship
                Ship temp = new Ship();
                // Loop counter
                int loop = 0;
                // Check for empty inventory
                if( armadaInv[loop] == null )
                {
                    JOptionPane.showMessageDialog(null, "Inventory empty! Nothing to save!", "Error!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                // While loop to write objects to database
                while( armadaInv[loop] != null )
                {
                    // Get the next inventory item and set to temp
                    temp = armadaInv[loop];
                    // Get the ship class
                    sClass = temp.getShipClass();
                    // Get the ships model
                    mdl = temp.getModel();
                    // Create update strings
                    updateShipType.setString(1, sClass);
                    updateShipType.setString(2, mdl);

                    // Execute update
                    updateShipType.executeUpdate();
                    // Get last shipid
                    rs = updateShipType.getGeneratedKeys();
                    // Holds last shipId
                    int key = 0;
                    // Check if last shipid exists
                    if(rs.next())
                    {
                        key = rs.getInt(1);
                    }
                    // Get manufacturer
                    mnfr = temp.getManufacturer();
                    // Get shielding
                    shld = temp.getShielding();
                    // Get weapons
                    wpns = temp.getWeapons();
                    // Get engine
                    eng = temp.getEngine();
                    // Get hyperdrive
                    hypdr = temp.getHyperdrive();
                    // Set update strings
                    updateShipSpecs.setString(1, Integer.toString(key));
                    updateShipSpecs.setString(2, mnfr);
                    updateShipSpecs.setString(3, shld);
                    updateShipSpecs.setString(4, wpns);
                    updateShipSpecs.setString(5, eng);
                    updateShipSpecs.setString(6, hypdr);
                    // Execute update
                    updateShipSpecs.executeUpdate();
                    // Increment loop counter
                    loop++;
                }
                // Display message data write complete
                JOptionPane.showMessageDialog(null, "Write to database complete!", "Complete", JOptionPane.PLAIN_MESSAGE);
            }           // Catch error if writing fails
            catch( Exception ex )
            {
                //ex.printStackTrace();
                // Display error
                //JOptionPane.showMessageDialog(null, "Duplicate ID error! Ending Save and returning!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            finally
            {
                try
                {
                    // Close connections
                    rs.close();
                    statement.close();
                    connection.close();
                }
                catch(Exception ex)
                {

                }
            }
            // End try catch
        }
    }//GEN-LAST:event_jButton3ActionPerformed
/***************************************************************
*** Method Name: jButton8 (Add ship button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Gets the ship specifications from
*** a user and adds a new ship to the armada inventory.
*** Method Inputs: String
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here: ADD SHIP BUTTON
        // Enable applicable buttons
        jButton1.setEnabled(true);
        jButton6.setEnabled(true);
        jButton5.setEnabled(true);
        jButton9.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        // Begin try
        try
        {
            // Holds string input
            String check = "";
            // Instantiate temp of type Ship
            Ship temp = new Ship();
            // Check for which radio button is selected and
            // set the ship class accordingly.
            if(jRadioButton1.isSelected())
            {
                temp.setShipClass("Freighter");
            }
            else if(jRadioButton2.isSelected())
            {
                temp.setShipClass("Fighter/Bomber");
            }
            else if(jRadioButton3.isSelected())
            {
                temp.setShipClass("Capital Ship");
            }
            // Get the model
            check = jTextField2.getText();
            // Validate empty string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set the model
            temp.setModel(jTextField2.getText());
            // Get the manufacturer
            check = jTextField3.getText();
            // Validate string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set the manufacturer
            temp.setManufacturer(jTextField3.getText());
            // Get the shielding
            check = jTextField4.getText();
            // Validate string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set shielding
            temp.setShielding(jTextField4.getText());
            // Get weapons
            check = jTextField6.getText();
            // Validate string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set weapons
            temp.setWeapons(jTextField6.getText());
            // Get engine
            check = jTextField7.getText();
            // Validate string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set engine
            temp.setEngine(jTextField7.getText());
            // Get hyperdrive
            check = jTextField8.getText();
            // Validate string
            if( check.length() == 0 )
            {
                throw new Exception();
            }
            // Set hyperdrive
            temp.setHyperdrive(jTextField8.getText());
            // Add the ship to the armada and get the index where it was added
            index = addShip(armadaInv, temp);
            // Display the newly added ship
            jLabel3.setText("Ship Class: "+armadaInv[index].getShipClass());
            jLabel4.setText("Model: "+armadaInv[index].getModel());
            jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
            jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
            if(armadaInv[index].getShipID() == 0)
            {
                jLabel7.setText("Ship ID: Not Yet Assigned");
            }
            else
            {
                jLabel7.setText("Ship ID: " + Integer.toString(armadaInv[index].getShipID()));
            }
            jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
            jLabel9.setText("Engine: "+armadaInv[index].getEngine());
            jLabel10.setText("Hyperdrive: "+armadaInv[index].getHyperdrive());
            // Reset the text fields
            jTextField2.setText("");
            jTextField3.setText("");
            jTextField4.setText("");
            jTextField6.setText("");
            jTextField7.setText("");
            jTextField8.setText("");
        }
        catch(Exception ex)
        {
            // Throw error for empty string
            JOptionPane.showMessageDialog(null, "All fields are required.", "Error!", JOptionPane.ERROR_MESSAGE);
        }//End try
    }//GEN-LAST:event_jButton8ActionPerformed
/***************************************************************
*** Method Name: jButton6 (Previous button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows a user to cycle through the
*** inventory to the beginning.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here: PREVIOUS BUTTON
        // Begin try catch
        try
            {
                // Check if next index is not null
                if( armadaInv[index - 1] != null )
                {
                    // Decrement index
                    index--;
                    // Display previous ship
                    if(armadaInv[index].getShipClass().equals("Freighter"))
                    {
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/freighter.jpg")));
                    }
                    else if(armadaInv[index].getShipClass().equals("Fighter/Bomber"))
                    {
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Ywing.jpg")));
                    }
                    else if(armadaInv[index].getShipClass().equals("Capital Ship"))
                    {
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/venator.jpg")));
                    }
                    jLabel3.setText("Ship Class: "+armadaInv[index].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[index].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
                    if(armadaInv[index].getShipID() == 0)
                    {
                        jLabel7.setText("Ship ID: Not Yet Assigned");
                    }
                    else
                    {
                        jLabel7.setText("Ship ID: " + Integer.toString(armadaInv[index].getShipID()));
                    }
                    jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[index].getEngine());
                    jLabel10.setText("Hyperdrive: "+armadaInv[index].getHyperdrive());
                }
                else // If nothing is previous, display ship at index 0
                {
                    index = 0;
                    jLabel3.setText("Ship Class: "+armadaInv[index].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[index].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
                    if(armadaInv[index].getShipID() == 0)
                    {
                        jLabel7.setText("Ship ID: Not Yet Assigned");
                    }
                    else
                    {
                        jLabel7.setText("Ship ID: " + Integer.toString(armadaInv[index].getShipID()));
                    }
                    jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[index].getEngine());
                    jLabel10.setText("Hyperdrive: "+armadaInv[index].getHyperdrive());
                }
            }
            catch( Exception ex )
            {
                // Display error message
                JOptionPane.showMessageDialog(null, "No vehicle previous to current!", "Error!", JOptionPane.ERROR_MESSAGE);
            }//End try
    }//GEN-LAST:event_jButton6ActionPerformed
/***************************************************************
*** Method Name: jButton5 (Next button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows the user to cycle through
*** the inventory until the end is reached
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here: NEXT BUTTON
        // Begin try
        try
        {
                // Check if next index is empty and display last vehicle
                if( armadaInv[index + 1] == null )
                {
                    jLabel3.setText("Ship Class: "+armadaInv[index].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[index].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
                    if(armadaInv[index].getShipID() == 0)
                    {
                        jLabel7.setText("Ship ID: Not Yet Assigned");
                    }
                    else
                    {
                        jLabel7.setText("Ship ID: " + Integer.toString(armadaInv[index].getShipID()));
                    }
                    jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[index].getEngine());
                    jLabel10.setText("Hyperdrive: "+armadaInv[index].getHyperdrive());
                    throw new Exception();
                }
                else // Increment index and display the next vehicle
                {
                    index++;
                    if(armadaInv[index].getShipClass().equals("Freighter")){
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/freighter.jpg")));
                    }
                    else if(armadaInv[index].getShipClass().equals("Fighter/Bomber")){
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Ywing.jpg")));
                    }
                    else if(armadaInv[index].getShipClass().equals("Capital Ship")){
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/venator.jpg")));
                    }
                    jLabel3.setText("Ship Class: "+armadaInv[index].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[index].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
                    if(armadaInv[index].getShipID() == 0)
                    {
                        jLabel7.setText("Ship ID: Not Yet Assigned");
                    }
                    else
                    {
                        jLabel7.setText("Ship ID: " + Integer.toString(armadaInv[index].getShipID()));
                    }
                    jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[index].getEngine());
                    jLabel10.setText("Hyperdrive: "+armadaInv[index].getHyperdrive());
                }
            }
            catch( Exception ex ){
                // Display error message
                JOptionPane.showMessageDialog(null, "Reached end of inventory!", "Error!", JOptionPane.ERROR_MESSAGE);
            }//End try
             
    }//GEN-LAST:event_jButton5ActionPerformed
/***************************************************************
*** Method Name: jButton4 (Load button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows the user to load current
*** inventory from the database
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here: LOAD BUTTON
        
            // Create connection
            Connection connection = null;
            // Create result set
            ResultSet resultSetType = null;
            ResultSet resultSetSpecs = null;
            // Create statement
            Statement statement = null;
            // Hold ship info
            String shipRead = "";
            // Hold column name
            String colName = "";
            // hold ship id
            int shID = 0;
            // Hold ship class
            String sClass = "";
            // Hold model
            String mdl = "";
            // Hold manufacturer
            String mr = "";
            // Hold shielding
            String shd = "";
            // Hold weapons
            String wps = "";
            // Holds engine
            String eg = "";
            // Holds hyperdrive
            String hpd = "";
            // Loop counter
            int loop = 0;
            // Try catch begin
            try
            {   
                index = 0;
                // If an inventory is already loaded
                if( armadaInv[0] != null )
                {
                    // Ask the user if they want to continue and overwrite current inventory
                    int overWrite = JOptionPane.showConfirmDialog(null, "An inventory is already loaded." + '\n' + "Would you like to continue?", "Warning!", JOptionPane.YES_NO_CANCEL_OPTION);
                    // If user clicks no or cancel
                    if( overWrite != 0)
                    {
                        // Cancel load operation
                        return;
                    }
                }
                // Load driver
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                // Get database connection
                connection = DriverManager.getConnection(DATABASE_URL);
                // Create statement connection
                statement = connection.createStatement();
                // Query the database
                resultSetType = statement.executeQuery("SELECT * FROM [Ship.Type] ORDER BY ShipID");
                // Get the metadata
                ResultSetMetaData metaData = resultSetType.getMetaData();
                // Get number of columns
                int numberOfCol = metaData.getColumnCount();
                // Create new inventory
                armadaInv = new Ship[500];
                // Disable nonapplicable buttons
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
                jButton8.setEnabled(false);
                jButton9.setEnabled(false);
                // Enable applicable buttons
                jButton6.setEnabled(true);
                jButton1.setEnabled(true);
                jButton5.setEnabled(true);
                jButton7.setEnabled(true);
                // Read in data
                while( resultSetType.next() )
                {
                    // Insantiate a temp ship
                    Ship temp = new Ship();
                    // For loop for each column
                    for( int a = 1; a <= numberOfCol; a++ )
                    {
                        // Column name
                        colName = metaData.getColumnName(a).toString().trim();
                        // Next object read
                        shipRead = resultSetType.getObject(a).toString().trim();
                        // Check which column is read
                        if( Objects.equals(colName, new String("ShipID")) )
                        {
                            // Set ship id
                            shID = Integer.parseInt(shipRead);
                            temp.setShipID(shID);
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Class")))
                        {
                            // Set ship class
                            sClass = shipRead;
                            temp.setShipClass(sClass);                                    
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Model")))
                        {
                            // Set model
                            mdl = shipRead;
                            temp.setModel(mdl);                                    
                            armadaInv[loop] = temp;
                            loop++;
                            break;
                        }
                    }
                }
                // Create statement connection
                statement = connection.createStatement();
                // Query the database
                resultSetSpecs = statement.executeQuery("SELECT * FROM [Ship.Specifications] ORDER BY ShipID");
                // Get the metadata
                metaData = resultSetSpecs.getMetaData();
                // Get number of columns
                numberOfCol = metaData.getColumnCount();
                // Tracks current ship
                loop = 0;
                // Read in data
                while( resultSetSpecs.next() )
                {
                    // For loop for each column
                    for( int a = 1; a <= numberOfCol; a++ )
                    {
                        // Column name
                        colName = metaData.getColumnName(a).toString().trim();
                        // Next object read
                        shipRead = resultSetSpecs.getObject(a).toString().trim();
                        // Check which column is read
                        // Skip shipid column since it was already read
                        // in the first query
                        if( Objects.equals(colName, new String("ShipID")) )
                        {
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Manufacturer")))
                        {
                            // Set manufacturer
                            mr = shipRead;
                            armadaInv[loop].setManufacturer(mr);                                    
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Shielding")))
                        {
                            // Set shielding
                            shd = shipRead;
                            armadaInv[loop].setShielding(shd);                                    
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Weapons")))
                        {
                            // Set weapons
                            wps = shipRead;
                            armadaInv[loop].setWeapons(wps);                                    
                            continue;
                        }
                        else if( Objects.equals(colName, new String("Engine")))
                        {
                            // Set engine
                            eg = shipRead;
                            armadaInv[loop].setEngine(eg);                                    
                            continue;
                        }
                        else if( Objects.equals(colName, new String("HyperDrive")))
                        {
                            // Set hyperdrive
                            hpd = shipRead;
                            armadaInv[loop].setHyperdrive(hpd);
                            loop++;
                            break;
                        }
                    }                            
                }
                // If database is not empty display first ship read in
                if(armadaInv[0] != null)
                {
                    jLabel7.setText("Ship ID: "+Integer.toString(armadaInv[0].getShipID()));
                    jLabel3.setText("Class: "+armadaInv[0].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[0].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[0].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[0].getShielding());
                    jLabel8.setText("Weapons: "+armadaInv[0].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[0].getEngine());
                    jLabel10.setText("HyperDrive: "+armadaInv[0].getHyperdrive());
                }
                else
                {
                    // Display error for empty database
                    JOptionPane.showMessageDialog(null, "Database is empty! No ships to load!", "Error!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            catch( Exception ex )
            {
                //ex.printStackTrace();
            }//End try
            finally
            {
                try
                {
                    // Close connections
                    resultSetType.close();
                    resultSetSpecs.close();
                    statement.close();
                    connection.close();
                }
                catch(Exception ex)
                {

                }
            }// End finally
            // Let user know load complete
            JOptionPane.showMessageDialog(null, "Inventory load complete.", "Load", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton4ActionPerformed
/***************************************************************
*** Method Name: jButton7 (Delete button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows the user to delete the current
*** viewed ship from the database.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here: DELETE BUTTON
        
        // If there is no current ship display error
        if( armadaInv[index] == null )
        {
            JOptionPane.showMessageDialog(null, "Nothing to delete!", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check with user to confirm delete action
        int n = JOptionPane.showConfirmDialog(null,"Warning! Are you sure you would like to delete this ship "
                                            + "from the database?",
                                              "Delete", JOptionPane.YES_NO_OPTION);
        // Execute delete operation if yes
        if(n == JOptionPane.YES_OPTION)
        {
            // Create connection
            Connection connection = null;
            // Create statement
            Statement statement = null;
            String current = "";
            // Try catch begin
            try
            {   
                // Load driver
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                // Get database connection
                connection = DriverManager.getConnection(DATABASE_URL);
                // Create statement connection
                statement = connection.createStatement();
                // Get current ship id to delete
                current = Integer.toString(armadaInv[index].getShipID());
                // Execute delete query on current ship id
                statement.executeUpdate("DELETE FROM [Ship.Specifications] WHERE " + current + " = ShipID");
                statement.executeUpdate("DELETE FROM [Ship.Type] WHERE " + current + " = ShipID");
                JOptionPane.showMessageDialog(null, "Ship has been deleted from the Armada Database", "Complete", JOptionPane.INFORMATION_MESSAGE);
                // Set inventory index to null when deleted
                armadaInv[index] = null;
                // For loop shifts ships down after delete is complete
                for(int a = index; a < armadaInv.length - 1; a++)
                {
                    if(a == armadaInv.length)
                    {    
                        break;
                    }
                    else
                    {
                        armadaInv[a] = armadaInv[a + 1];
                    }
                }
                // Display next ship if not null
                if(armadaInv[index] != null)
                {
                    jLabel7.setText("Ship ID: "+Integer.toString(armadaInv[index].getShipID()));
                    jLabel3.setText("Class: "+armadaInv[index].getShipClass());
                    jLabel4.setText("Model: "+armadaInv[index].getModel());
                    jLabel5.setText("Manufacturer: "+armadaInv[index].getManufacturer());
                    jLabel6.setText("Shielding: "+armadaInv[index].getShielding());
                    jLabel8.setText("Weapons: "+armadaInv[index].getWeapons());
                    jLabel9.setText("Engine: "+armadaInv[index].getEngine());
                    jLabel10.setText("HyperDrive: "+armadaInv[index].getHyperdrive());
                }
                else // Display default fields if no ship to display
                {
                    jLabel7.setText("Ship ID: ");
                    jLabel3.setText("Class: ");
                    jLabel4.setText("Model: ");
                    jLabel5.setText("Manufacturer: ");
                    jLabel6.setText("Shielding: ");
                    jLabel8.setText("Weapons: ");
                    jLabel9.setText("Engine: ");
                    jLabel10.setText("HyperDrive: ");
                }
            }
            catch(Exception ex)
            {
                //ex.printStackTrace();
            }//End try
            finally
            {
                try
                {
                    // Close connections
                    statement.close();
                    connection.close();
                }
                catch(Exception ex)
                {

                }
            }// End finally
        } // End if    
    }//GEN-LAST:event_jButton7ActionPerformed
/***************************************************************
*** Method Name: jButton10 (Clear button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows the user to clear the
*** specifications text fields to start over
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here: CLEAR BUTTON
        // Clear text fields
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
    }//GEN-LAST:event_jButton10ActionPerformed
/***************************************************************
*** Method Name: jButton9 (Remove button)
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Allows the user to remove vehicle
*** from inventory. Does not affect database. Used to remove
*** ships for editing prior to save.
*** Method Inputs: N/A
*** Return Value: N/A
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here: Remove Button
        // Try begin
        try
        {
            // If no vehicle to remove display error
            if( armadaInv[index] == null )
            {
                JOptionPane.showMessageDialog(null, "No current vehicle", "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else // Remove ship and shift remaining inventory
            {
                for( int a = index; a < armadaInv.length; a++ )
                {
                    if(armadaInv[a + 1] == null)
                    {
                        armadaInv[a] = null;
                        break;
                    }
                    armadaInv[a] = armadaInv[a + 1];
                }
            }
            // Display default values for labels
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/StarWarsArmada/images/Logo1.jpg")));
            jLabel3.setText("Ship Class: ");
            jLabel4.setText("Model: ");
            jLabel5.setText("Manufacturer: ");
            jLabel6.setText("Shielding: ");
            jLabel7.setText("Ship ID: ");
            jLabel8.setText("Weapons: ");
            jLabel9.setText("Engine: ");
            jLabel10.setText("Hyperdrive: ");
            // Let user know vehicle is removed
            JOptionPane.showMessageDialog(null, "Vehicle removed.", "Remove", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception ex)
        {
            //ex.printStackTrace();
        }//End try
    }//GEN-LAST:event_jButton9ActionPerformed
/***************************************************************
*** Method Name: addShip
*** Method Author: Austin LeBel
****************************************************************
*** Purpose of the Method: Adds a ship to the next available
*** inventory spot. Returns index of added location.
*** Method Inputs: Ship[] inv, Ship s
*** Return Value: int index
****************************************************************
*** Date: 04/26/2017
****************************************************************
***************************************************************/
    public int addShip( Ship[] inv, Ship s ){
        // Search for empty location to add new ship
        for( int i = 0; i < inv.length; i++ )
        {    
            // Add new ship if empty cell
            if( inv[i] == null )
            {
                // Add ship
                inv[i] = s;
                index = i;
                // Stop the loop
                break;
            }
        }
        return index;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArmadaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArmadaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArmadaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArmadaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArmadaGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
